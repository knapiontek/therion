// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("malloc.ll", getGlobalContext());
 mod->setDataLayout("");
 mod->setTargetTriple("x86_64-pc-linux-gnu");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 StructType *StructTy_struct_TestStruct = mod->getTypeByName("struct.TestStruct");
 if (!StructTy_struct_TestStruct) {
 StructTy_struct_TestStruct = StructType::create(mod->getContext(), "struct.TestStruct");
 }
 std::vector<Type*>StructTy_struct_TestStruct_fields;
 StructTy_struct_TestStruct_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_TestStruct_fields.push_back(Type::getDoubleTy(mod->getContext()));
 if (StructTy_struct_TestStruct->isOpaque()) {
 StructTy_struct_TestStruct->setBody(StructTy_struct_TestStruct_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_3 = PointerType::get(StructTy_struct_TestStruct, 0);
 
 PointerType* PointerTy_2 = PointerType::get(PointerTy_3, 0);
 
 PointerType* PointerTy_4 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 std::vector<Type*>FuncTy_6_args;
 FuncTy_6_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_6 = FunctionType::get(
  /*Result=*/PointerTy_4,
  /*Params=*/FuncTy_6_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_5 = PointerType::get(FuncTy_6, 0);
 
 PointerType* PointerTy_7 = PointerType::get(Type::getDoubleTy(mod->getContext()), 0);
 
 
 // Function Declarations
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 Function* func_malloc = mod->getFunction("malloc");
 if (!func_malloc) {
 func_malloc = Function::Create(
  /*Type=*/FuncTy_6,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"malloc", mod); // (external, no body)
 func_malloc->setCallingConv(CallingConv::C);
 }
 AttributeSet func_malloc_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoAlias);
    PAS = AttributeSet::get(mod->getContext(), 0U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_malloc_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_malloc->setAttributes(func_malloc_PAL);

// Global Variable Declarations


// Constant Definitions
ConstantInt* const_int32_8 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
ConstantInt* const_int32_9 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
ConstantInt* const_int64_10 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("16"), 10));
ConstantFP* const_double_11 = ConstantFP::get(mod->getContext(), APFloat(2.000000e+00));

// Global Variable Definitions

// Function Definitions

// Function: main (func_main)
{
 
 BasicBlock* label_12 = BasicBlock::Create(mod->getContext(), "",func_main,0);
 
 // Block  (label_12)
 AllocaInst* ptr_13 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_12);
 ptr_13->setAlignment(4);
 AllocaInst* ptr_ts = new AllocaInst(PointerTy_3, "ts", label_12);
 ptr_ts->setAlignment(8);
 StoreInst* void_14 = new StoreInst(const_int32_9, ptr_13, false, label_12);
 void_14->setAlignment(4);
 CallInst* ptr_15 = CallInst::Create(func_malloc, const_int64_10, "", label_12);
 ptr_15->setCallingConv(CallingConv::C);
 ptr_15->setTailCall(false);
 AttributeSet ptr_15_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoAlias);
    PAS = AttributeSet::get(mod->getContext(), 0U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_15_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_15->setAttributes(ptr_15_PAL);

CastInst* ptr_16 = new BitCastInst(ptr_15, PointerTy_3, "", label_12);
StoreInst* void_17 = new StoreInst(ptr_16, ptr_ts, false, label_12);
void_17->setAlignment(8);
LoadInst* ptr_18 = new LoadInst(ptr_ts, "", false, label_12);
ptr_18->setAlignment(8);
GetElementPtrInst* ptr_19 = GetElementPtrInst::Create(StructTy_struct_TestStruct, ptr_18, {
 const_int32_9, 
 const_int32_9
}, "", label_12);
StoreInst* void_20 = new StoreInst(const_int32_8, ptr_19, false, label_12);
void_20->setAlignment(8);
LoadInst* ptr_21 = new LoadInst(ptr_ts, "", false, label_12);
ptr_21->setAlignment(8);
GetElementPtrInst* ptr_22 = GetElementPtrInst::Create(StructTy_struct_TestStruct, ptr_21, {
 const_int32_9, 
 const_int32_8
}, "", label_12);
StoreInst* void_23 = new StoreInst(const_double_11, ptr_22, false, label_12);
void_23->setAlignment(8);
LoadInst* ptr_24 = new LoadInst(ptr_ts, "", false, label_12);
ptr_24->setAlignment(8);
CastInst* int64_25 = new PtrToIntInst(ptr_24, IntegerType::get(mod->getContext(), 64), "", label_12);
CastInst* int32_26 = new TruncInst(int64_25, IntegerType::get(mod->getContext(), 32), "", label_12);
ReturnInst::Create(mod->getContext(), int32_26, label_12);

}

return mod;
}
