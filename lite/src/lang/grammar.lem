%token_prefix TOK_
%token_type { Token* }
%extra_argument { Lang *lang }
%syntax_error { lang->error(); }
%include { #include "lang/lang.hpp" }

input ::= var_map.

var_map ::= var_map var(c).
var_map ::= var(c).

%type var { Var* }
var(c) ::= ID(i) COLON type(t). { c = lang->var(i, t); }

%type type { Type* }
type(t) ::= BOOL. { t = lang->type(Type::BOOL); }
type(t) ::= INT8. { t = lang->type(Type::INT8); }
type(t) ::= INT16. { t = lang->type(Type::INT16); }
type(t) ::= INT32. { t = lang->type(Type::INT32); }
type(t) ::= INT64. { t = lang->type(Type::INT64); }
type(t) ::= UINT8. { t = lang->type(Type::UINT8); }
type(t) ::= UINT16. { t = lang->type(Type::UINT16); }
type(t) ::= UINT32. { t = lang->type(Type::UINT32); }
type(t) ::= UINT64. { t = lang->type(Type::UINT64); }
type(t) ::= FLOAT32. { t = lang->type(Type::FLOAT32); }
type(t) ::= FLOAT64. { t = lang->type(Type::FLOAT64); }
type(t) ::= FLOAT128. { t = lang->type(Type::FLOAT128); }
type(t) ::= ID(i). { t = lang->type(i); }
