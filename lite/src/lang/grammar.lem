%token_prefix TOK_
%token_type { Ret<Token> }
%extra_argument { Tree* tree }
%syntax_error { (void)yymajor; (void)yyminor; throw SyntaxException(); }
%destructor input { (void)yypminor; }

input ::= var_list.

var_list ::= var_list var.
var_list ::= var.
var_list ::= NOT NEG INC DEC LP RP THIS THAT IN OUT IF FOR REPEAT UNTIL ANY NONE.

%type var { Ret<Var> }
var ::= IND(n) ID(i) COLON exp(e). { tree->var(n, i, e); }

%type exp { Ret<Expression> }
exp(e) ::= exp(e1) op(o) LB exp(e2) RB. { e = tree->exp(e1, o, e2); }
exp(e) ::= LB exp(e1) RB. { e = tree->exp(e1); }
exp(e) ::= exp(e1) op(o) loc(l). { e = tree->exp(e1, o, l); }
exp(e) ::= exp(e1) op(o) final(f). { e = tree->exp(e1, o, f); }
exp(e) ::= loc(l). { e = tree->exp(l); }
exp(e) ::= final(f). { e = tree->exp(f); }

%type loc { Ret<Location> }
loc(l) ::= loc(l1) DOT ID(i) LS exp(e) RS. { l = tree->loc(l1, i, e); }
loc(l) ::= loc(l1) DOT ID(i). { l = tree->loc(l1, i); }
loc(l) ::= ID(i) LS exp(e) RS. { l = tree->loc(i, e); }
loc(l) ::= ID(i). { l = tree->loc(i); }

%type final { Ret<Final> }
final(f) ::= INT8(v). { f = tree->final(v, Type::INT8); }
final(f) ::= INT16(v). { f = tree->final(v, Type::INT16); }
final(f) ::= INT32(v). { f = tree->final(v, Type::INT32); }
final(f) ::= INT64(v). { f = tree->final(v, Type::INT64); }
final(f) ::= FLOAT32(v). { f = tree->final(v, Type::FLOAT32); }
final(f) ::= FLOAT64(v). { f = tree->final(v, Type::FLOAT64); }

%type op { BinaryOp }
op(o) ::= MUL. { o = BinaryOp::MUL; }
op(o) ::= DIV. { o = BinaryOp::DIV; }
op(o) ::= MOD. { o = BinaryOp::MOD; }
op(o) ::= ADD. { o = BinaryOp::ADD; }
op(o) ::= SUB. { o = BinaryOp::SUB; }
op(o) ::= SHL. { o = BinaryOp::SHL; }
op(o) ::= SHR. { o = BinaryOp::SHR; }
op(o) ::= EQ. { o = BinaryOp::EQ; }
op(o) ::= NE. { o = BinaryOp::NE; }
op(o) ::= LE. { o = BinaryOp::LE; }
op(o) ::= LT. { o = BinaryOp::LT; }
op(o) ::= GE. { o = BinaryOp::GE; }
op(o) ::= GT. { o = BinaryOp::GT; }
op(o) ::= AND. { o = BinaryOp::AND; }
op(o) ::= OR. { o = BinaryOp::OR; }
op(o) ::= XOR. { o = BinaryOp::XOR; }
