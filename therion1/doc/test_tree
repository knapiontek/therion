	int8 self_test(Node* root) {
		if(root) {
			int8 h0 = self_test(root->leaves[0]);
			int8 h1 = self_test(root->leaves[1]);
			if(h1 - h0 != root->balance)
				::printf("\ninbalance: %s", root->value.ascii());
			return 1 + core::max(h0, h1);
		}
		return 0;
	}
	void print_tree(const char* message) {
		// 1, 3, 7, 15, 31, 63, 127, 255, ...
		uint32 space = 63;
		char tabs[space + 1];
		::memset(tabs, '\t', space);
		tabs[space] = '\0';
		char* zero = tabs + space;

		Node* nodes[10000];
		::bzero(nodes, sizeof(nodes));
		Node** root = nodes;
		Node** line = nodes;
		Node** leaf = nodes;
		*leaf = the_root;

		bool run = true;
		while(run) {
			run = false;
			uint32 half_space = (space - 1) / 2;
			::printf("\n%s", zero - half_space);
			while(root <= line) {
				if(*root) {
					if((*(++leaf) = (*root)->leaves[0]))
						run = true;
					if((*(++leaf) = (*root)->leaves[1]))
						run = true;
					::printf("%s(%d)", (*root)->value.ascii(), (*root)->balance);
				}
				else {
					*(++leaf) = 0;
					*(++leaf) = 0;
					::printf("....");
				}
				++root;
				printf("%s", zero - space);
			}
			space = half_space;
			line = leaf;
		}

		::printf("\n\n%s ---------------------------", message);
		::fflush(stdout);
	}

